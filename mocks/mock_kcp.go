// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SarunasBucius/kafka-cass-practise/kcp (interfaces: Producer,DbConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	kcp "github.com/SarunasBucius/kafka-cass-practise/kcp"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// ProduceEvent mocks base method
func (m *MockProducer) ProduceEvent(arg0 kcp.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceEvent indicates an expected call of ProduceEvent
func (mr *MockProducerMockRecorder) ProduceEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceEvent", reflect.TypeOf((*MockProducer)(nil).ProduceEvent), arg0)
}

// MockDbConnector is a mock of DbConnector interface
type MockDbConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnectorMockRecorder
}

// MockDbConnectorMockRecorder is the mock recorder for MockDbConnector
type MockDbConnectorMockRecorder struct {
	mock *MockDbConnector
}

// NewMockDbConnector creates a new mock instance
func NewMockDbConnector(ctrl *gomock.Controller) *MockDbConnector {
	mock := &MockDbConnector{ctrl: ctrl}
	mock.recorder = &MockDbConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbConnector) EXPECT() *MockDbConnectorMockRecorder {
	return m.recorder
}

// GetVisits mocks base method
func (m *MockDbConnector) GetVisits() (kcp.VisitsByIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisits")
	ret0, _ := ret[0].(kcp.VisitsByIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisits indicates an expected call of GetVisits
func (mr *MockDbConnectorMockRecorder) GetVisits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisits", reflect.TypeOf((*MockDbConnector)(nil).GetVisits))
}

// GetVisitsByIP mocks base method
func (m *MockDbConnector) GetVisitsByIP(arg0, arg1 string, arg2, arg3 time.Time) (kcp.VisitsByIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitsByIP", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(kcp.VisitsByIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitsByIP indicates an expected call of GetVisitsByIP
func (mr *MockDbConnectorMockRecorder) GetVisitsByIP(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitsByIP", reflect.TypeOf((*MockDbConnector)(nil).GetVisitsByIP), arg0, arg1, arg2, arg3)
}

// InsertEvent mocks base method
func (m *MockDbConnector) InsertEvent(arg0 kcp.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent
func (mr *MockDbConnectorMockRecorder) InsertEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockDbConnector)(nil).InsertEvent), arg0)
}
