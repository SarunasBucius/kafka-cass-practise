// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SarunasBucius/kafka-cass-practise/kcp (interfaces: Producer)

// Package mocks is a generated GoMock package.
package mocks

import (
	kcp "github.com/SarunasBucius/kafka-cass-practise/kcp"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// ProduceEvent mocks base method
func (m *MockProducer) ProduceEvent(arg0 kcp.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceEvent indicates an expected call of ProduceEvent
func (mr *MockProducerMockRecorder) ProduceEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceEvent", reflect.TypeOf((*MockProducer)(nil).ProduceEvent), arg0)
}
